{"version":3,"sources":["emoji.js","App.js","serviceWorker.js","firebaseConfig.js","spinner.js","index.js"],"names":["Emoji","props","className","role","aria-label","label","aria-hidden","symbol","ElevationScroll","children","window","trigger","useScrollTrigger","disableHysteresis","threshold","target","undefined","React","cloneElement","elevation","useStyles","makeStyles","theme","root","width","backgroundColor","palette","background","paper","appBar","top","bottom","center","display","justifyContent","text","padding","alignItems","input","marginLeft","spacing","flex","iconButton","divider","height","margin","App","useState","open","setOpen","handleClose","messageState","setFormState","classes","getMessageToFirestore","useFirestore","collection","messages","useFirestoreCollectionData","messageWithFirestore","sendMessageToFirestore","message","add","Fragment","CssBaseline","AppBar","color","Toolbar","Typography","variant","Container","Box","my","List","component","map","item","idx","ListItem","button","key","ListItemIcon","onClick","console","log","ListItemText","primary","Delete","position","Paper","InputBase","placeholder","value","inputProps","onChange","event","prevNote","handleChange","onKeyPress","e","shiftKey","preventDefault","Divider","orientation","IconButton","Send","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","autoFocus","Boolean","location","hostname","match","Spinner","CircularProgress","app","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fallback","traceId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c0a569e0.chunk.js","sourcesContent":["import React from 'react';\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\nexport default Emoji;","import React, { useState } from 'react';\nimport { useFirestore, useFirestoreCollectionData } from \"reactfire\";\nimport PropTypes from 'prop-types';\nimport {\n    makeStyles,\n    Box,\n    Container,\n    AppBar,\n    Toolbar,\n    Typography,\n    CssBaseline,\n    useScrollTrigger,\n    List,\n    ListItem,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    ListItemIcon,\n    ListItemText,\n    Paper,\n    InputBase,\n    Divider,\n    IconButton\n} from '@material-ui/core';\nimport Emoji from './emoji';\nimport { Delete, Send } from '@material-ui/icons';\n\n\nfunction ElevationScroll(props) {\n    const { children, window } = props;\n    const trigger = useScrollTrigger({\n        disableHysteresis: true,\n        threshold: 0,\n        target: window ? window() : undefined,\n    });\n\n    return React.cloneElement(children, {\n        elevation: trigger ? 4 : 0,\n    });\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n    },\n    center: {\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    text: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n}));\n\n\nfunction App(props) {\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const [ messageState, setFormState ] = useState( {text: ''});\n    const classes = useStyles();\n    const getMessageToFirestore = useFirestore()\n        .collection('shopping-list')\n\n    const messages = useFirestoreCollectionData(getMessageToFirestore)\n    const messageWithFirestore = useFirestore()\n        .collection('shopping-list')\n\n    const handleChange = (event) => {\n        const { value } = event.target;\n        setFormState((prevNote) => {\n            return {\n                ...prevNote,\n                text: value,\n            };\n        });\n    };\n\n    function sendMessageToFirestore(message) {\n        messageWithFirestore.add(message)\n    }\n\n    const handleUserKeyPress = e => {\n        if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            console.log('handleUserKeyPress')\n            sendMessageToFirestore(messageState)\n            setFormState({text: ''})\n        }\n    };\n\n    const sendMessasgeToFirebase = () => {\n        sendMessageToFirestore(messageState)\n        setFormState({text: ''})\n    }\n\n\n  return (\n    <React.Fragment>\n        <CssBaseline />\n        <ElevationScroll {...props}>\n            <AppBar color=\"secondary\">\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        –ó–∞—è, —â–æ –∫—É–ø–∏—Ç–∏? <Emoji symbol=\"üçï\"/><Emoji symbol=\"üç£\"/><Emoji symbol=\"üç©\"/>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </ElevationScroll>\n        <Toolbar />\n        <Container>\n            <Box my={2}>\n                <List component=\"nav\" className={classes.root} aria-label=\"contacts\">\n                    {\n                        messages.map((item ,idx) => (\n                            <ListItem button key={idx}>\n                                <ListItemIcon onClick={() => console.log(`Check icon ${idx+1}`)}>\n                                    <Emoji symbol=\"üêæ\"/>\n                                </ListItemIcon>\n                                <ListItemText primary={`${item.text}`} />\n                                {/*<ListItemIcon onClick={() => console.log(`Edit icon ${idx+1}`)}>*/}\n                                {/*    <Edit />*/}\n                                {/*</ListItemIcon>*/}\n                                <ListItemIcon onClick={() => handleClickOpen()}>\n                                    <Delete />\n                                </ListItemIcon>\n                            </ListItem>\n                        ))\n                    }\n                </List>\n            </Box>\n        </Container>\n        <Toolbar />\n        <Toolbar />\n        <AppBar position=\"fixed\" color=\"default\" className={classes.appBar}>\n            <Toolbar className={classes.center}>\n            <Paper component=\"form\" className={classes.text}>\n                <InputBase\n                    className={classes.input}\n                    placeholder=\"–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç\"\n                    value={messageState.text}\n                    inputProps={{ 'aria-label': 'search google maps' }}\n                    onChange={event => handleChange(event)}\n                    onKeyPress={handleUserKeyPress}\n                />\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton\n                    color=\"primary\"\n                    className={classes.iconButton}\n                    aria-label=\"directions\"\n                    onClick={() => sendMessasgeToFirebase()}\n                >\n                    <Send />\n                </IconButton>\n            </Paper>\n            </Toolbar>\n\n        </AppBar>\n\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">{\"–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç, –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î.\"}</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    –î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–π—Ç—É\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\n                    –Ø—Å–Ω–æ\n                </Button>\n            </DialogActions>\n        </Dialog>\n    </React.Fragment>\n  );\n}\n\nElevationScroll.propTypes = {\n    children: PropTypes.element.isRequired,\n    window: PropTypes.func,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const firebaseConfig = {\r\n    apiKey: \"AIzaSyCtg-um1_xf4DgRwz4xzQf_V6Ea8UxpYNs\",\r\n    authDomain: \"genisis-chat.firebaseapp.com\",\r\n    databaseURL: \"https://genisis-chat.firebaseio.com\",\r\n    projectId: \"genisis-chat\",\r\n    storageBucket: \"genisis-chat.appspot.com\",\r\n    messagingSenderId: \"24700544018\",\r\n    appId: \"1:24700544018:web:bb2a0e1fd41d14b999a4cb\"\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function Spinner() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { FirebaseAppProvider, SuspenseWithPerf } from \"reactfire\";\nimport { firebaseConfig } from \"./firebaseConfig\";\nimport Spinner from \"./spinner\"\n\nconst app = (\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\n        <SuspenseWithPerf\n            fallback={<Spinner/>}\n            traceId={'traceId'}\n        >\n            <App />\n        </SuspenseWithPerf>\n    </FirebaseAppProvider>\n)\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}